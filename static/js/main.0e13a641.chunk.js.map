{"version":3,"sources":["App.js","redux/tickerState.js","index.js","redux/reducer.js"],"names":["socket","io","on","console","log","connected","emit","quotes","store","dispatch","type","payload","App","mytickers","useSelector","state","useEffect","className","map","item","ticker","uuidv4","exchange","style","color","isIncreased","price","class","change","change_percent","dividend","yield","last_trade_time","Date","toLocaleString","timeStyle","dateStyle","tickerState","createStore","action","compareArr","i","length","push","element","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"iQASMA,EAASC,YADE,oCAEjBD,EAAOE,GAAG,WAAW,kBAAMC,QAAQC,IAAIJ,EAAOK,cAC9CL,EAAOM,KAAK,SAEZN,EAAOE,GAAG,UAAU,SAAUK,GAE5BC,EAAMC,SAAS,CACbC,KAAM,aACNC,QAASJ,OAiHEK,MA5Gf,WAEE,IAAMC,EAAYC,aAAY,SAACC,GAAD,OAAWA,KAQzC,OANAC,qBAAU,cAIP,CAACH,IAGF,gCACE,sBAAKI,UAAU,gBAAf,UACE,sBACEA,UAAU,qBADZ,mBAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKC,QADDC,qBAMX,sBACEJ,UAAU,qBADZ,qBAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKG,UADDD,qBAMX,sBACEJ,UAAU,qBADZ,mBAGGJ,EACCA,EAAUK,KAAI,SAACC,GACb,OAAO,qBAELI,MAAO,CAAEC,MAAOL,EAAKM,YAAc,QAAU,OAFxC,UAGLN,EAAKO,MAHA,IAGQP,EAAKM,YAAc,mBAAGE,MAAM,yBAA8B,mBAAGA,MAAM,6BAF3EN,kBAIP,UAGN,sBACEJ,UAAU,qBADZ,yBAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKS,QADDP,qBAMX,sBACEJ,UAAU,qBADZ,2BAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKU,gBADDR,qBAMX,sBACEJ,UAAU,qBADZ,qBAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKW,UADDT,qBAMX,sBACEJ,UAAU,qBADZ,kBAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKY,OADDV,qBAMX,sBACEJ,UAAU,qBADZ,4BAGGJ,EAAUK,KAAI,SAACC,GACd,OAAO,6BAEJA,EAAKa,iBAAmB,IAAIC,KAAKd,EAAKa,iBAAiBE,eAAe,KAAM,CAAEC,UAAW,SAAUC,UAAW,YAD1Gf,wBAMb,qJC7HOgB,EAAc,G,oBCSd7B,EAAQ8B,aCPN,WAA+C,IAA9BvB,EAA6B,uDAArBsB,EAAaE,EAAQ,uCAEzD,OAAQA,EAAO7B,MAEX,IAAK,aAWD,IAFA,IAAI8B,EAAa,GAERC,EAAI,EAAGA,EAAI1B,EAAMG,KAAI,SAAAC,GAAI,OAAKA,EAAKO,SAAOgB,SAAUD,EAErDF,EAAO5B,QAAQO,KAAI,SAAAC,GAAI,OAAKA,EAAKO,SAAOe,GAAK1B,EAAMG,KAAI,SAAAC,GAAI,OAAKA,EAAKO,SAAOe,GAE5ED,EAAWG,MAAK,GAIhBH,EAAWG,MAAK,GAOxB,IAAK,IAAIC,KAAWL,EAAO5B,QACvB4B,EAAO5B,QAAQiC,GAAf,YAAyCJ,EAAWI,GAGxD,OAAOL,EAAO5B,QAElB,QAEI,OAAOI,KD/BuB8B,YAAgBC,MAE1DC,IAASC,OACP,cAAC,IAAD,CAAUxC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFyC,SAASC,eAAe,W","file":"static/js/main.0e13a641.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport { io } from \"socket.io-client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { store } from \"./index\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// connect to server\r\nconst ENDPOINT = 'https://mytickers.herokuapp.com/';\r\nconst socket = io(ENDPOINT);\r\nsocket.on(\"connect\", () => console.log(socket.connected));\r\nsocket.emit(\"start\");\r\n\r\nsocket.on(\"ticker\", function (quotes) {\r\n\r\n  store.dispatch({ // dispatch new data to the reducer\r\n    type: \"NEW_QUOTES\",\r\n    payload: quotes\r\n  });\r\n\r\n});\r\n\r\nfunction App() {\r\n\r\n  const mytickers = useSelector((state) => state); // get access to the state in the store\r\n\r\n  useEffect(() => { // re-render the page when mytickers changes\r\n\r\n    // console.log(\"state changed\"); \r\n\r\n  }, [mytickers]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"wrapper__main\">\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Ticker\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.ticker}\r\n            </h5>\r\n          })}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Exchange\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.exchange}\r\n            </h5>\r\n          })}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Prices\r\n          {mytickers ?\r\n            mytickers.map((item) => {\r\n              return <h5\r\n                key={uuidv4()}\r\n                style={{ color: item.isIncreased ? 'green' : 'red' }}\r\n              >{item.price} {item.isIncreased ? <i class=\"fa-solid fa-arrow-up\"></i> : <i class=\"fa-solid fa-arrow-down\"></i>}</h5>;\r\n            })\r\n            : 'none'}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Price Change\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.change}\r\n            </h5>\r\n          })}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Percent Change\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.change_percent}\r\n            </h5>\r\n          })}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Dividend\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.dividend}\r\n            </h5>\r\n          })}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Yield\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.yield}\r\n            </h5>\r\n          })}\r\n        </div>\r\n\r\n        <div\r\n          className='tickercolumn__main'>\r\n          Last Trade Time\r\n          {mytickers.map((item) => {\r\n            return <h5\r\n              key={uuidv4()}>\r\n              {item.last_trade_time && new Date(item.last_trade_time).toLocaleString('en', { timeStyle: 'medium', dateStyle: 'medium' })}\r\n            </h5>\r\n          })}\r\n        </div>\r\n      </div>\r\n      <h6>Powered by socket.io, React.js/Redux, HTML/CSS, server side hosted by Heroku. All prices are randomly generated</h6>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const tickerState = [];","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reducer from \"./redux/reducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { tickerState } from \"./tickerState\";\r\n\r\nexport default function reducer(state = tickerState, action) {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'NEW_QUOTES':\r\n\r\n            // state.length > 0 && console.log('previous: ' + state.map(item => { return ' ' + item.price }));\r\n            // action.payload.length > 0 && console.log('actual: ' + action.payload.map(item => { return ' ' + item.price }));\r\n\r\n            // let prevPriceArr = state.map(item => +item.price) // take only prices from previous state and convert them from string to number\r\n\r\n            // let newPriceArr = action.payload.map(item => +item.price) take only prices from new state and convert them from string to number\r\n\r\n            let compareArr = [] // compare prices at state and payload and add 'true' if the price increased and 'false' if decreased\r\n\r\n            for (let i = 0; i < state.map(item => +item.price).length; ++i) {\r\n\r\n                if (action.payload.map(item => +item.price)[i] > state.map(item => +item.price)[i]) { // compare new price with previous one\r\n\r\n                    compareArr.push(true); // if bigger add 'true' to compareArr\r\n                }\r\n                else {\r\n\r\n                    compareArr.push(false) // if smaller add 'false' to compareArr\r\n                }\r\n            }\r\n            // https://ru.stackoverflow.com/questions/1437301/%d0%9a%d0%b0%d0%ba-%d0%b4%d0%be%d0%b1%d0%b0%d0%b2%d0%b8%d1%82%d1%8c-%d0%ba%d0%b0%d0%b6%d0%b4%d1%8b%d0%b9-%d1%8d%d0%bb%d0%b5%d0%bc%d0%b5%d0%bd%d1%82-%d0%bc%d0%b0%d1%81%d1%81%d0%b8%d0%b2%d0%b0-%d0%b2-%d0%be%d0%b1%d1%8a%d0%b5%d0%ba%d1%82-%d1%82%d0%b0%d0%ba%d0%b8%d0%bc-%d0%be%d0%b1%d1%80%d0%b0%d0%b7%d0%be%d0%bc\r\n\r\n            // add to every action.payload object one more key 'isIncreased' with value from compareArr\r\n\r\n            for (let element in action.payload) {\r\n                action.payload[element]['isIncreased'] = compareArr[element]\r\n            }\r\n\r\n            return action.payload\r\n\r\n        default:\r\n\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}